package manpower.manage.service;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;

import corona.common.util.ExcelRead;
import corona.common.util.ExcelReadOption;
import manpower.common.util.FileUtils;
import manpower.manage.dao.ManageDAO;


@Service("manageService")
public class ManageServiceImpl implements ManageService{
	Logger log = Logger.getLogger(this.getClass());
	
	@Resource(name="fileUtils")
	private FileUtils fileUtils;
	
	@Resource(name="manageDAO")
	private ManageDAO manageDAO;

	/*공지사항*/
	@Override
	public List<Map<String, Object>> selectNoticeList(Map<String, Object> map) throws Exception {
		return manageDAO.selectNoticeList(map);
	}
	
	@Override
	public void updateDelNoticeAllList(Map<String, Object> map) throws Exception {
		manageDAO.updateDelNoticeAllList(map);
	}
	
	/*은행코드관리*/
	@Override
	public List<Map<String, Object>> selectBankList(Map<String, Object> map) throws Exception {
		return manageDAO.selectBankList(map);
	}
	
	@Override
	public void updateDelBankAllList(Map<String, Object> map) throws Exception {
		manageDAO.updateDelBankAllList(map);
	}
	
	@Override
	public Map<String, Object> bankExcelUp(File destFile,String ins_id){
		System.out.println("bankExcelUp service 탐");
		System.out.println("ins_id 확인 : " + ins_id);
		
	    	ExcelReadOption excelReadOption = new ExcelReadOption();

	        excelReadOption.setFilePath(destFile.getAbsolutePath());
 
	        excelReadOption.setOutputColumns("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","AA","AB","AC");


	        excelReadOption.setStartRow(2);

	        List<Map<String, String>>excelContent = ExcelRead.read(excelReadOption);

	        Map<String, Object> paramMap = new HashMap<String, Object>();
	        paramMap.put("excelContent", excelContent);

	        int rtn=1;
	        Map<String, Object> resultMap = new HashMap<String, Object>();
	        
	        String name="";
	        String err_column="";
	        
	        try {

	            for (Map<String, String> map : excelContent) {
	            	map.put("INS_ID", ins_id);
	            	System.out.println("map 확인 : " + map.toString());
	            	name = map.get("D");
	            	
	            	manageDAO.insertBankManageExcel(map);
	            }
	            
		    } catch (Exception e) {
		    	rtn = 0;
		    	resultMap.put("exception", e.getMessage());
		    	
		    	String[] array = e.getMessage().split("###");
		    	
		    	if(array[1].contains("WRITE_DATE")) {err_column="입력일";}
		    	if(array[1].contains("CELL_NUM")) {err_column="핸드폰번호";}
		    	if(array[1].contains("PATIENT_NUM")) {err_column="환자번호";}
		    	if(array[1].contains("PATIENT_NAME")) {err_column="환자명";}
		    	if(array[1].contains("CONTACT_NUM")) {err_column="접촉자번호";}
		    	if(array[1].contains("CONTACT_NAME")) {err_column="접촉자명";}
		    	if(array[1].contains("CONFIRM_GRADE")) {err_column="확진차수";}
		    	if(array[1].contains("SEX")) {err_column="성별";}
		    	if(array[1].contains("BIRTH")) {err_column="생년월일";}
		    	if(array[1].contains("JOB")) {err_column="직업";}
		    	if(array[1].contains("ORG_GUBUN")) {err_column="주소구분";}
		    	if(array[1].contains("ORG_DONG")) {err_column="주소동";}
		    	if(array[1].contains("ORG_ADDRESS")) {err_column="주소";}
		    	if(array[1].contains("ORG_ADDRESS_DTL")) {err_column="주소상세";}
		    	if(array[1].contains("INFECT_GUBUN")) {err_column="감염경로구분";}
		    	if(array[1].contains("INFECT_DONG")) {err_column="감염경로동";}
		    	if(array[1].contains("INFECT_DAE")) {err_column="감염경로대구분";}
		    	if(array[1].contains("INFECT_SO")) {err_column="감염경로소구분";}
		    	if(array[1].contains("INFECT_ASFECT_AREA")) {err_column="추정감염경로";}
		    	if(array[1].contains("INFECT_ASFECT_AREA_DTL")) {err_column="추정감염경로상세주소";}
		    	if(array[1].contains("INFECT_JIPDAN_GUBUN")) {err_column="집단감염구분";}
		    	if(array[1].contains("INFECT_JIPDAN_GUBUN_FACILITY")) {err_column="감염시설";}
		    	if(array[1].contains("CONFIRM_DATE")) {err_column="확진 판정일";}
		    	if(array[1].contains("HOSPITAL")) {err_column="입원병원";}
		    	if(array[1].contains("DISCHARGE_DATE")) {err_column="퇴원일자";}
		    	if(array[1].contains("REMARK")) {err_column="비고";}
		    	if(array[1].contains("DEATH")) {err_column="사망";}
		    	if(array[1].contains("TA_CONFIRM_YN")) {err_column="타지역 확진 판정";}
		    	if(array[1].contains("ICHUP_YN")) {err_column="강남구민 이첩 자료";}
		    	
		    	resultMap.put("err_msg", "엑셀 업로드중 " + name + "님 의 "+ err_column + " 자료에서 에러가 발생하였습니다.");
		    	resultMap.put("err_msg_dtl", array[1]);
		    	

		      // TODO Auto-generated catch block
		      e.printStackTrace();
		    }
	        
	        resultMap.put("rtn", rtn);
	        
	        return resultMap;
	  }
	
}
